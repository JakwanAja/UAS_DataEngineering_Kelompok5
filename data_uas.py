# -*- coding: utf-8 -*-
"""Data_UAS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dSwT_k6sdrq2FTyckK2ok8UsJysG8plb
"""

!pip install requests beautifulsoup4

import requests
from bs4 import BeautifulSoup
import csv
from pathlib import Path

# Daftar Dataset yang digunakan
dataset_NTB = [
    {
        "url": "https://data.ntbprov.go.id/dataset/9e2b6e9e-ec78-4619-b7c7-9009f15ec075/show#",
        "output_file": "dataset_ntb_aps.csv"
    },
    {
        "url": "https://data.ntbprov.go.id/dataset/9e43669b-b98f-4dbe-9194-45784f7eb29c/show",
        "output_file": "dataset_ntb_ppm.csv"

    },
    {
        "url": "https://data.ntbprov.go.id/dataset/9e435c84-a69c-496d-a4d1-b47bd60c5d72/show",
        "output_file": "dataset_ntb_tpt.csv"
    },
    {
        "url": "https://data.ntbprov.go.id/dataset/9cfd6ff2-5d7f-44f3-b71b-18850c7445f6/show",
        "output_file": "dataset_ntb_upah.csv"

    },
]

def ambil_data(url):
    try:
        response = requests.get(url)
        soup = BeautifulSoup(response.text, "html.parser")
        return [
            [col.get_text(strip=True) for col in row.find_all("td")]
            for row in soup.find("table").find_all("tr")
            if row.find_all("td")
        ]
    except Exception as e:
        print(f"Gagal mengambil data dari {url}: {e}")
        return []

def simpan_ke_csv(data, output_file):
    path = Path(output_file)
    path.parent.mkdir(parents=True, exist_ok=True)

    with open(path, "w", newline="", encoding="utf-8") as f:
        csv.writer(f).writerows(data)
    print(f"Data disimpan ke {path.absolute()}")

print("Memulai scraping...")
for dataset in dataset_NTB:
    data = ambil_data(dataset["url"])
    if data:
        simpan_ke_csv(data, dataset["output_file"])
print("Selesai!")

# import data as dataframes
import pandas as pd

df_aps = pd.read_csv("/content/dataset_ntb_aps.csv")
df_ppm = pd.read_csv("/content/dataset_ntb_ppm.csv")
df_tpt = pd.read_csv("/content/dataset_ntb_tpt.csv")
df_upah = pd.read_csv("/content/dataset_ntb_upah.csv")

df_aps.info()
df_ppm.info()
df_tpt.info()
df_upah.info()

# import data as dataframes
df_aps.head(), df_ppm.head(), df_tpt.head(), df_upah.head()

tahun_target = [2018, 2019, 2020, 2021, 2022, 2023]

filter = {
    'aps': {
        'by': ["Tahun", "Kelompok Umur", "Kode Kabupaten Kota"],
        'ascending': [True, False, True]
    },
    'pm': {
        'by': ["Tahun", "Kode Provinsi Kabupaten Kota"],
        'ascending': [True, True]
    },
    'tpt': {
        'by': ["Tahun", "Kode Provinsi Kabupaten Kota"],
        'ascending': [True, True]
    },
    'umr': {
        'by': ["Tahun"],
        'ascending': [True]
    }
}

df_aps_2018_sampai_2023 = df_aps[df_aps["Tahun"].isin(tahun_target)]
df_ppm_2018_sampai_2023 = df_ppm[df_ppm["Tahun"].isin(tahun_target)]
df_tpt_2018_sampai_2023 = df_tpt[df_tpt["Tahun"].isin(tahun_target)]
df_upah_2018_sampai_2023 = df_upah[df_upah["Tahun"].isin(tahun_target)]

df_aps_2018_sampai_2023 = df_aps_2018_sampai_2023.sort_values(by=filter['aps']['by'], ascending=filter['aps']['ascending'])
df_ppm_2018_sampai_2023 = df_ppm_2018_sampai_2023.sort_values(by=filter['pm']['by'], ascending=filter['pm']['ascending'])
df_tpt_2018_sampai_2023 = df_tpt_2018_sampai_2023.sort_values(by=filter['tpt']['by'], ascending=filter['tpt']['ascending'])
df_upah_2018_sampai_2023 = df_upah_2018_sampai_2023.sort_values(by=filter['umr']['by'], ascending=filter['umr']['ascending'])

kode_nama_kabupaten_mapping = df_ppm_2018_sampai_2023[["Kode Provinsi Kabupaten Kota", "Nama Provinsi Kabupaten Kota"]].drop_duplicates().set_index("Kode Provinsi Kabupaten Kota")["Nama Provinsi Kabupaten Kota"].to_dict()

df_upah_2018_sampai_2023["Nama_Kabupaten"] = df_upah_2018_sampai_2023["kode_Kabupaten"].map(kode_nama_kabupaten_mapping)

# Pivot dataframe Angka Partisipasi Sekolah
df_aps_2018_sampai_2023['Nilai_APS'] = df_aps_2018_sampai_2023['Nilai APS'].astype(str).str.replace(',', '.', regex=False)
df_aps_2018_sampai_2023['Nilai_APS'] = pd.to_numeric(df_aps_2018_sampai_2023['Nilai_APS'], errors='coerce')

df_aps_ubah_kelompok_umur = df_aps_2018_sampai_2023.pivot_table(
    index=['Kode Kabupaten Kota', 'Kabupaten Kota', 'Tahun'],
    columns='Kelompok Umur',
    values='Nilai_APS'
).reset_index()

# Urutkan kembali DataFrame setelah operasi pivot
df_aps_urutan = df_aps_ubah_kelompok_umur.sort_values(by=['Tahun', 'Kode Kabupaten Kota'], ascending=[True, True])

# Mennentukan urutan kolom kelompok umur yang diinginkan
menetapkan_urutan_kolom = ['Kode Kabupaten Kota', 'Kabupaten Kota', 'Tahun', '7 - 12 Tahun', '13 - 15 Tahun', '16 - 18 Tahun']

# Mengambil nama-nama kolom yang ada pada dataframe df_aps_ubah_kelompok_umur setelah dilakukan pivot
ambil_kolom = df_aps_ubah_kelompok_umur.columns.tolist()
# Menggabungkan kolom yang diinginkan dengan kolom yang ada lainnya
final_kolom_kelompok_umur = [col for col in menetapkan_urutan_kolom if col in ambil_kolom]

df_aps_ubah_kelompok_umur = df_aps_urutan[final_kolom_kelompok_umur]

# Tampilkan beberapa baris pertama untuk memeriksa hasilnya
df_aps_ubah_kelompok_umur.head(11)

ambil_kolom = {
    'ppm': [
        "Kode Provinsi Kabupaten Kota",
        "Nama Provinsi Kabupaten Kota",
        "Jumlah Penduduk Miskin",
        "Persentase Penduduk Miskin",
        "Tahun"
    ],
    'tpt': [
        "Kode Provinsi Kabupaten Kota",
        "Nama Provinsi Kabupaten Kota",
        "TPT",
        "Tahun"
    ],
    'upah': [
        "kode_Kabupaten",
        "Nama_Kabupaten",
        "Besaran_UMK",
        "Tahun"
    ]
}

df_filtered = {
    'ppm': df_ppm_2018_sampai_2023,
    'tpt': df_tpt_2018_sampai_2023,
    'upah': df_upah_2018_sampai_2023
}

ambilkolom_ppm_2018_sampai_2023 = df_filtered['ppm'][ambil_kolom['ppm']]
ambilkolom_tpt_2018_sampai_2023 = df_filtered['tpt'][ambil_kolom['tpt']]
ambilkolom_upah_2018_sampai_2023 = df_filtered['upah'][ambil_kolom['upah']]

# mengubah nama kolom
df_aps_ubah_kelompok_umur.rename(columns={"Kode Kabupaten Kota": "Kode_Kabupaten", "Kabupaten Kota": "Nama_Kabupaten", "Kelompok Umur": "Kelompok_Umur", "Nilai APS": "Persentase_Nilai_APS"}, inplace=True)
ambilkolom_ppm_2018_sampai_2023.rename(columns={"Kode Provinsi Kabupaten Kota": "Kode_Kabupaten", "Nama Provinsi Kabupaten Kota": "Nama_Kabupaten", "Jumlah Penduduk Miskin": "Jumlah_Penduduk_Miskin", "Persentase Penduduk Miskin": "Persentase_Penduduk_Miskin"}, inplace=True)
ambilkolom_tpt_2018_sampai_2023.rename(columns={"Kode Provinsi Kabupaten Kota": "Kode_Kabupaten", "Nama Provinsi Kabupaten Kota": "Nama_Kabupaten", "TPT": "Persentase_Tingkat_Pengangguran"}, inplace=True)
ambilkolom_upah_2018_sampai_2023.rename(columns={"kode_Kabupaten": "Kode_Kabupaten", "Besaran_UMK": "Besaran_Upah"}, inplace=True)

konversi_kolom = {
    'ppm': [
        {
            'kolom': 'Persentase_Penduduk_Miskin',
            'pembersihan': lambda x: x.astype(str).str.replace(',', '.')
        },
        {
            'kolom': 'Jumlah_Penduduk_Miskin',
            'pembersihan': lambda x: x.astype(str).str.replace(',', '', regex=False).str.replace(',', '.', regex=False)
        }
    ],
    'tpt': [
        {
            'kolom': 'Persentase_Tingkat_Pengangguran',
            'pembersihan': lambda x: x.astype(str).str.replace(',', '.')
        }
    ],
    'upah': [
        {
            'kolom': 'Besaran_Upah',
            'pembersihan': lambda x: x.astype(str).str.replace(',', '', regex=False)
        }
    ]
}

df_clean = {
    'ppm': ambilkolom_ppm_2018_sampai_2023,
    'tpt': ambilkolom_tpt_2018_sampai_2023,
    'upah': ambilkolom_upah_2018_sampai_2023
}

# Proses konversi tipe data
for dataset, konfig in konversi_kolom.items():
    for kolom_config in konfig:
        col_name = kolom_config['kolom']
        if pd.api.types.is_object_dtype(df_clean[dataset][col_name]):
            df_clean[dataset][col_name] = pd.to_numeric(
                kolom_config['pembersihan'](df_clean[dataset][col_name]),
                errors='coerce'
            )

df_gg1 = df_aps_ubah_kelompok_umur.set_index(['Kode_Kabupaten', 'Nama_Kabupaten', 'Tahun'])
df_gg2 = ambilkolom_ppm_2018_sampai_2023.set_index(['Kode_Kabupaten',  'Nama_Kabupaten', 'Tahun'])
df_gg3 = ambilkolom_tpt_2018_sampai_2023.set_index(['Kode_Kabupaten',  'Nama_Kabupaten', 'Tahun'])
df_gg4 = ambilkolom_upah_2018_sampai_2023.set_index(['Kode_Kabupaten',  'Nama_Kabupaten', 'Tahun'])

df_gg_all = pd.concat([df_gg1, df_gg2, df_gg3, df_gg4], axis=1, join='outer').reset_index()
df_gg_all.head(11)

# Menampilkan hasil semua kolom dan baris dari df_final
df_gg_all.info()
df_gg_all.isnull().sum()

# menghapus missing data pada baris nusa tenggara barat
data_final = df_gg_all[df_gg_all['Nama_Kabupaten'] != 'Nusa Tenggara Barat']
data_final.head()

data_final.shape

# cek data duplikast
data_final.duplicated().sum()

import pandas as pd

def transform_data(df_aps, df_ppm, df_tpt, df_upah):
    tahun_target = [2018, 2019, 2020, 2021, 2022, 2023]

    # Filter data berdasarkan tahun
    df_aps = df_aps[df_aps["Tahun"].isin(tahun_target)]
    df_ppm = df_ppm[df_ppm["Tahun"].isin(tahun_target)]
    df_tpt = df_tpt[df_tpt["Tahun"].isin(tahun_target)]
    df_upah = df_upah[df_upah["Tahun"].isin(tahun_target)]

    # Urutkan data
    df_aps = df_aps.sort_values(by=["Tahun", "Kelompok Umur", "Kode Kabupaten Kota"], ascending=[True, False, True])
    df_ppm = df_ppm.sort_values(by=["Tahun", "Kode Provinsi Kabupaten Kota"], ascending=[True, True])
    df_tpt = df_tpt.sort_values(by=["Tahun", "Kode Provinsi Kabupaten Kota"], ascending=[True, True])
    df_upah = df_upah.sort_values(by=["Tahun"], ascending=[True])

    # Mapping nama kabupaten ke data upah
    mapping_kode_nama = df_ppm[["Kode Provinsi Kabupaten Kota", "Nama Provinsi Kabupaten Kota"]].drop_duplicates().set_index("Kode Provinsi Kabupaten Kota")["Nama Provinsi Kabupaten Kota"].to_dict()
    df_upah["Nama_Kabupaten"] = df_upah["kode_Kabupaten"].map(mapping_kode_nama)

    # --- PILIH KOLUMN YANG DIPERLUKAN ---
    ambil_kolom = {
        'ppm': [
            "Kode Provinsi Kabupaten Kota",
            "Nama Provinsi Kabupaten Kota",
            "Jumlah Penduduk Miskin",
            "Persentase Penduduk Miskin",
            "Tahun"
        ],
        'tpt': [
            "Kode Provinsi Kabupaten Kota",
            "Nama Provinsi Kabupaten Kota",
            "TPT",
            "Tahun"
        ],
        'upah': [
            "kode_Kabupaten",
            "Nama_Kabupaten",
            "Besaran_UMK",
            "Tahun"
        ]
    }

    df_filtered = {
        'ppm': df_ppm[ambil_kolom['ppm']],
        'tpt': df_tpt[ambil_kolom['tpt']],
        'upah': df_upah[ambil_kolom['upah']]
    }

    # --- RENAME KOLUM UNTUK KONSISTENSI ---
    df_aps['Nilai_APS'] = df_aps['Nilai APS'].astype(str).str.replace(',', '.', regex=False)
    df_aps['Nilai_APS'] = pd.to_numeric(df_aps['Nilai_APS'], errors='coerce')

    df_aps_pivot = df_aps.pivot_table(
        index=['Kode Kabupaten Kota', 'Kabupaten Kota', 'Tahun'],
        columns='Kelompok Umur',
        values='Nilai_APS'
    ).reset_index()

    df_aps_pivot = df_aps_pivot.sort_values(by=['Tahun', 'Kode Kabupaten Kota'])

    kolom_urut = ['Kode Kabupaten Kota', 'Kabupaten Kota', 'Tahun', '7 - 12 Tahun', '13 - 15 Tahun', '16 - 18 Tahun']
    df_aps_pivot = df_aps_pivot[[col for col in kolom_urut if col in df_aps_pivot.columns]]

    df_aps_pivot.rename(columns={
        "Kode Kabupaten Kota": "Kode_Kabupaten",
        "Kabupaten Kota": "Nama_Kabupaten"
    }, inplace=True)

    df_filtered['ppm'].rename(columns={
        "Kode Provinsi Kabupaten Kota": "Kode_Kabupaten",
        "Nama Provinsi Kabupaten Kota": "Nama_Kabupaten",
        "Jumlah Penduduk Miskin": "Jumlah_Penduduk_Miskin",
        "Persentase Penduduk Miskin": "Persentase_Penduduk_Miskin"
    }, inplace=True)

    df_filtered['tpt'].rename(columns={
        "Kode Provinsi Kabupaten Kota": "Kode_Kabupaten",
        "Nama Provinsi Kabupaten Kota": "Nama_Kabupaten",
        "TPT": "Persentase_Tingkat_Pengangguran"
    }, inplace=True)

    df_filtered['upah'].rename(columns={
        "kode_Kabupaten": "Kode_Kabupaten",
        "Besaran_UMK": "Besaran_Upah"
    }, inplace=True)

    # --- KONVERSI TIPE DATA NUMERIK ---
    df_filtered['ppm']["Persentase_Penduduk_Miskin"] = pd.to_numeric(
        df_filtered['ppm']["Persentase_Penduduk_Miskin"].astype(str).str.replace(',', '.'), errors='coerce')

    df_filtered['ppm']["Jumlah_Penduduk_Miskin"] = pd.to_numeric(
        df_filtered['ppm']["Jumlah_Penduduk_Miskin"].astype(str).str.replace(',', '').str.replace(',', '.'), errors='coerce')

    df_filtered['tpt']["Persentase_Tingkat_Pengangguran"] = pd.to_numeric(
        df_filtered['tpt']["Persentase_Tingkat_Pengangguran"].astype(str).str.replace(',', '.'), errors='coerce')

    df_filtered['upah']["Besaran_Upah"] = pd.to_numeric(
        df_filtered['upah']["Besaran_Upah"].astype(str).str.replace(',', ''), errors='coerce')

    # --- GABUNGKAN SEMUA DATA ---
    df_merge = pd.concat([
        df_aps_pivot.set_index(['Kode_Kabupaten', 'Nama_Kabupaten', 'Tahun']),
        df_filtered['ppm'].set_index(['Kode_Kabupaten', 'Nama_Kabupaten', 'Tahun']),
        df_filtered['tpt'].set_index(['Kode_Kabupaten', 'Nama_Kabupaten', 'Tahun']),
        df_filtered['upah'].set_index(['Kode_Kabupaten', 'Nama_Kabupaten', 'Tahun'])
    ], axis=1).reset_index()

    # Hapus baris provinsi
    df_final = df_merge[df_merge["Nama_Kabupaten"] != "Nusa Tenggara Barat"]

    return df_final

final_df = transform_data(df_aps, df_ppm, df_tpt, df_upah)
final_df.head()

#@title Running workflow
import pandas as pd

def filter_tahun(df, tahun_target):
    return df[df["Tahun"].isin(tahun_target)]

def urutkan_data(df, by, ascending):
    return df.sort_values(by=by, ascending=ascending)

def mapping_kabupaten(df_upah, df_ppm):
    mapping = df_ppm[["Kode Provinsi Kabupaten Kota", "Nama Provinsi Kabupaten Kota"]].drop_duplicates()
    mapping_dict = mapping.set_index("Kode Provinsi Kabupaten Kota")["Nama Provinsi Kabupaten Kota"].to_dict()
    df_upah["Nama_Kabupaten"] = df_upah["kode_Kabupaten"].map(mapping_dict)
    return df_upah

def ambil_kolom_diperlukan(df_dict, ambil_kolom):
    return {key: df[ambil_kolom[key]] for key, df in df_dict.items()}

def pivot_aps(df_aps):
    df_aps['Nilai_APS'] = df_aps['Nilai APS'].astype(str).str.replace(',', '.', regex=False)
    df_aps['Nilai_APS'] = pd.to_numeric(df_aps['Nilai_APS'], errors='coerce')

    df_pivot = df_aps.pivot_table(
        index=['Kode Kabupaten Kota', 'Kabupaten Kota', 'Tahun'],
        columns='Kelompok Umur',
        values='Nilai_APS'
    ).reset_index()

    kolom_urut = ['Kode Kabupaten Kota', 'Kabupaten Kota', 'Tahun',
                  '7 - 12 Tahun', '13 - 15 Tahun', '16 - 18 Tahun']
    df_pivot = df_pivot[[col for col in kolom_urut if col in df_pivot.columns]]

    df_pivot.rename(columns={
        "Kode Kabupaten Kota": "Kode_Kabupaten",
        "Kabupaten Kota": "Nama_Kabupaten"
    }, inplace=True)

    return df_pivot

def rename_kolom(df_dict):
    df_dict['ppm'].rename(columns={
        "Kode Provinsi Kabupaten Kota": "Kode_Kabupaten",
        "Nama Provinsi Kabupaten Kota": "Nama_Kabupaten",
        "Jumlah Penduduk Miskin": "Jumlah_Penduduk_Miskin",
        "Persentase Penduduk Miskin": "Persentase_Penduduk_Miskin"
    }, inplace=True)

    df_dict['tpt'].rename(columns={
        "Kode Provinsi Kabupaten Kota": "Kode_Kabupaten",
        "Nama Provinsi Kabupaten Kota": "Nama_Kabupaten",
        "TPT": "Persentase_Tingkat_Pengangguran"
    }, inplace=True)

    df_dict['upah'].rename(columns={
        "kode_Kabupaten": "Kode_Kabupaten",
        "Besaran_UMK": "Besaran_Upah"
    }, inplace=True)

    return df_dict

def konversi_tipe_data(df_dict):
    df_dict['ppm']["Persentase_Penduduk_Miskin"] = pd.to_numeric(
        df_dict['ppm']["Persentase_Penduduk_Miskin"].astype(str).str.replace(',', '.'), errors='coerce')

    df_dict['ppm']["Jumlah_Penduduk_Miskin"] = pd.to_numeric(
        df_dict['ppm']["Jumlah_Penduduk_Miskin"].astype(str).str.replace(',', '').str.replace(',', '.'), errors='coerce')

    df_dict['tpt']["Persentase_Tingkat_Pengangguran"] = pd.to_numeric(
        df_dict['tpt']["Persentase_Tingkat_Pengangguran"].astype(str).str.replace(',', '.'), errors='coerce')

    df_dict['upah']["Besaran_Upah"] = pd.to_numeric(
        df_dict['upah']["Besaran_Upah"].astype(str).str.replace(',', ''), errors='coerce')

    return df_dict

def gabung_semua_data(df_aps_pivot, df_dict):
    df_merge = pd.concat([
        df_aps_pivot.set_index(['Kode_Kabupaten', 'Nama_Kabupaten', 'Tahun']),
        df_dict['ppm'].set_index(['Kode_Kabupaten', 'Nama_Kabupaten', 'Tahun']),
        df_dict['tpt'].set_index(['Kode_Kabupaten', 'Nama_Kabupaten', 'Tahun']),
        df_dict['upah'].set_index(['Kode_Kabupaten', 'Nama_Kabupaten', 'Tahun'])
    ], axis=1).reset_index()

    df_merge = df_merge[df_merge["Nama_Kabupaten"] != "Nusa Tenggara Barat"]
    return df_merge

# Jalankan pipeline
# Baca data
df_aps = pd.read_csv("dataset_ntb_aps.csv")
df_ppm = pd.read_csv("dataset_ntb_ppm.csv")
df_tpt = pd.read_csv("dataset_ntb_tpt.csv")
df_upah = pd.read_csv("dataset_ntb_upah.csv")

# Jalankan pipeline
data_final = transform_data(df_aps, df_ppm, df_tpt, df_upah)

# Simpan hasil
data_final.to_csv("data_final_ntb.csv", index=False)

data_final.head(62)

# hasil korelasi, pastikan hanya kolom numerik yang digunakan
correlation_matrix = data_final.corr(numeric_only=True)

# Visualisasi korelasi menggunakan heatmap
import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(10, 6))
# sns.heatmap menerima correlation_matrix yang sudah benar (hanya berisi korelasi numerik)
sns.heatmap(correlation_matrix, annot=True, cmap="coolwarm", fmt=".2f")
plt.title("Heatmap Korelasi: Pendidikan, Kemiskinan, Pengangguran, dan UMK")
plt.show()

# Visualisasi korelasi
import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(10, 6))
sns.heatmap(data_final, annot=True, cmap="coolwarm", fmt=".2f")
plt.title("Heatmap Korelasi: Pendidikan, Kemiskinan, Pengangguran, dan UMK")
plt.show()

import requests
from bs4 import BeautifulSoup
import csv

url = "https://data.ntbprov.go.id/dataset/9e2b6e9e-ec78-4619-b7c7-9009f15ec075/show#"
response = requests.get(url)
soup = BeautifulSoup(response.text, "html.parser")

table = soup.find("table")
rows = table.find_all("tr")

result = []

for row in rows:
    cols = row.find_all("td")
    if cols:  # hanya baris yang punya <td>
        result.append([col.get_text(strip=True) for col in cols])

# Simpan ke CSV
with open("data_ntb_aps.csv", "w", newline="", encoding="utf-8") as f:
    writer = csv.writer(f)
    writer.writerows(result)

print("Semua data berhasil disimpan ke 'data_ntb_aps.csv'")

import requests
from bs4 import BeautifulSoup
import csv

url = "https://data.ntbprov.go.id/dataset/9e2b6e9e-ec78-4619-b7c7-9009f15ec075/show#"
response = requests.get(url)
soup = BeautifulSoup(response.text, "html.parser")

table = soup.find("table")
rows = table.find_all("tr")

result = []

for row in rows:
    tds = row.find_all("td")

    # Pastikan ini adalah baris data (bukan header) dan jumlah kolom cukup
    if len(tds) >= 9:
        kabupaten = tds[4].get_text(strip=True)
        kelompok_umur = tds[5].get_text(strip=True)
        persentase = tds[6].get_text(strip=True)
        tahun = tds[8].get_text(strip=True)

        result.append({
            "kabupaten": kabupaten,
            "kelompok_umur": kelompok_umur,
            "persentase": persentase,
            "tahun": tahun
        })

# Simpan ke file CSV
with open('data_ntb.csv', mode='w', newline='', encoding='utf-8') as csvfile:
    fieldnames = ['kabupaten', 'kelompok_umur', 'persentase', 'tahun']
    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)

    writer.writeheader()  # Tulis header kolom
    for item in result:
        writer.writerow(item)

print("Data berhasil disimpan ke data_ntb.csv")

# import data as dataframes
df_aps.head(), df_ppm.head(), df_tpt.head(), df_upah.head()

